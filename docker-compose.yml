# Define the services (containers) that make up your application.
services:
  # 1. The Next.js Web Application Service
  webapp:
    # Build the image from the Dockerfile in the current directory.
    build: .
    container_name: codebuilder-webapp
    # Ensure the webapp starts after the database is ready.
    depends_on:
      - db
    # Restart the container automatically unless it is explicitly stopped.
    restart: unless-stopped
    # Pass the .env file to the container for environment variables.
    env_file:
      - ./.env
    ports:
      # Map port 3000 on the host to port 3000 in the container.
      - "3000:3000"
    networks:
      # Connect this service to our custom network.
      - codebuilder-net

  # 2. The PostgreSQL Database Service
  db:
    # Use the official PostgreSQL 15 image from Docker Hub.
    image: postgres:15-alpine
    container_name: codebuilder-postgres-db
    restart: unless-stopped
    # Pass the .env file, which must contain the DB credentials.
    env_file:
      - ./.env
    volumes:
      # Mount a named volume to persist the database data.
      # This is crucial to prevent data loss when the container is recreated.
      - postgres-data:/var/lib/postgresql/data
    networks:
      # Connect this service to our custom network.
      - codebuilder-net
    # Exposing the port is optional if only the webapp needs to connect,
    # but it's useful for debugging from your host machine.
    ports:
      - "5434:5432"

# Define the custom network that our services will share.
networks:
  codebuilder-net:
    # This explicitly tells Compose that the network is created
    # and managed outside of its control, which our deploy.yml now does.
    external: true

# Define the named volumes for persistent data storage.
# Docker manages the lifecycle of these volumes.
volumes:
  postgres-data: